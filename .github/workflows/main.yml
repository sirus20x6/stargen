name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc-13
            cxx: g++-13
            artifact_extension: tar.gz
          - os: windows-latest
            cc: gcc
            cxx: g++
            artifact_extension: zip
            mingw_version: 13.1.0
          - os: windows-latest
            compiler: msvc
            artifact_extension: zip
    steps:
    - uses: actions/checkout@v3

    - name: Install GCC 13 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-13 g++-13

    - name: Set up MinGW (Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler != 'msvc'
      uses: egor-tensin/setup-mingw@v2.2.0
      with:
        version: ${{ matrix.mingw_version }}

    - name: Set up environment variables
      if: matrix.compiler != 'msvc'
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: List installed MinGW libraries
      if: matrix.os == 'windows-latest'
      run: dir "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib"
      shell: pwsh

    - name: Configure CMake (MinGW Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler != 'msvc'
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_STANDARD=20 -A x64
      shell: pwsh

    - name: Configure CMake (MSVC Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_STANDARD=20
      shell: pwsh

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_STANDARD=20

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --verbose

    - name: Test
      working-directory: build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: Compress-Archive -Path build/* -DestinationPath stargen.${{ matrix.artifact_extension }}
      shell: pwsh

    - name: Package (Unix)
      if: matrix.os != 'windows-latest'
      run: tar -czvf stargen.${{ matrix.artifact_extension }} -C build .

    - uses: actions/upload-artifact@v3
      with:
        name: stargen-${{ matrix.os }}${{ matrix.compiler && format('-{0}', matrix.compiler) || '' }}.${{ matrix.artifact_extension }}
        path: stargen.${{ matrix.artifact_extension }}

  create-release:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/stargen-ubuntu-latest.tar.gz/stargen.tar.gz
        asset_name: stargen-linux.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (Windows MinGW)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/stargen-windows-latest.zip/stargen.zip
        asset_name: stargen-windows-mingw.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (Windows MSVC)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/stargen-windows-latest-msvc.zip/stargen.zip
        asset_name: stargen-windows-msvc.zip
        asset_content_type: application/zip