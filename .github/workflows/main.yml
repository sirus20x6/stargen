name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc-13
            cxx: g++-13
            artifact_extension: tar.gz
          - os: windows-latest
            cc: gcc
            cxx: g++
            artifact_extension: zip
            mingw_version: 13.1.0
          - os: windows-latest
            compiler: msvc
            artifact_extension: zip
    steps:
    - uses: actions/checkout@v3

    - name: Install GCC 13 (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-13 g++-13

    - name: Set up MinGW (Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler != 'msvc'
      uses: egor-tensin/setup-mingw@v2.2.0
      with:
        version: ${{ matrix.mingw_version }}

    - name: Set up environment variables
      if: matrix.compiler != 'msvc'
      run: |
        echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

    - name: Debug Environment
      run: |
        Write-Output "Operating System: ${{ runner.os }}"
        Write-Output "Chocolatey version:"
        choco --version
        Write-Output "MinGW installation:"
        choco list --local-only | Select-String mingw
        Write-Output "Searching for MinGW installation:"
        $possiblePaths = @(
          "C:\ProgramData\chocolatey\lib\mingw",
          "C:\ProgramData\chocolatey\lib\mingw64",
          "C:\tools\mingw64",
          "C:\msys64\mingw64"
        )
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Output "Found MinGW at: $path"
            Get-ChildItem $path -Recurse | Select-Object FullName | ForEach-Object { Write-Output $_.FullName }
          } else {
            Write-Output "Not found: $path"
          }
        }
        Write-Output "Environment variables:"
        Get-ChildItem env:
        Write-Output "System PATH:"
        $env:PATH -split ';'
        Write-Output "Which gcc:"
        Get-Command gcc -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
        Write-Output "GCC version:"
        & gcc --version
      shell: pwsh

    - name: List installed MinGW libraries
      if: matrix.os == 'windows-latest'
      run: |
        $possiblePaths = @(
          "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib",
          "C:\ProgramData\chocolatey\lib\mingw64\tools\install\mingw64\x86_64-w64-mingw32\lib",
          "C:\tools\mingw64\x86_64-w64-mingw32\lib",
          "C:\msys64\mingw64\x86_64-w64-mingw32\lib"
        )
        $found = $false
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Output "Found MinGW libraries at: $path"
            Get-ChildItem $path | ForEach-Object { Write-Output $_.Name }
            $found = $true
            break
          }
        }
        if (-not $found) {
          Write-Output "MinGW libraries not found in any of the expected locations"
          exit 1
        }
      shell: pwsh

    - name: Configure CMake (MinGW Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler != 'msvc'
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_STANDARD=20 -G "MinGW Makefiles"
      shell: pwsh

    # ... rest of the workflow remains the same